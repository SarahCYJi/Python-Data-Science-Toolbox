Functions with variable-length arguments (*args)
Flexible arguments enable you to pass a variable number of arguments to a function. 
In this exercise, you will practice defining a function that accepts a variable number of string arguments.

The function you will define is gibberish() which can accept a variable number of string values. 
Its return value is a single string composed of all the string arguments concatenated together in the order they were passed to the function call. 
You will call the function with a single string argument and see how the output changes with another call using more than one string argument. 
Recall from the previous video that, within the function definition, args is a tuple.

# Define gibberish
def gibberish(*args):
    """Concatenate strings in *args together."""

    # Initialize an empty string: hodgepodge
    hodgepodge=""

    # Concatenate the strings in args
    for word in args:
        hodgepodge += word

    # Return hodgepodge
    return hodgepodge

# Call gibberish() with one string: one_word
one_word = gibberish("luke")

# Call gibberish() with five strings: many_words
many_words = gibberish("luke", "leia", "han", "obi", "darth")

# Print one_word and many_words
print(one_word)
print(many_words)

Functions with variable-length keyword arguments (**kwargs)
Let's push further on what you've learned about flexible arguments - you've used *args, you're now going to use **kwargs! 
What makes **kwargs different is that it allows you to pass a variable number of keyword arguments to functions. 
Recall from the previous video that, within the function definition, kwargs is a dictionary.

To understand this idea better, 
you're going to use **kwargs in this exercise to define a function that accepts a variable number of keyword arguments. 
The function simulates a simple status report system that prints out the status of a character in a movie.
# Define report_status
def report_status(**kwargs):
    """Print out the status of a movie character."""

    print("\nBEGIN: REPORT\n")

    # Iterate over the key-value pairs of kwargs
    for key, value in kwargs.items():
        # Print out the keys and values, separated by a colon ':'
        print(key + ": " + value)

    print("\nEND REPORT")

# First call to report_status()
report_status(name="luke",affiliation="jedi",status="missing")

# Second call to report_status()
report_status(name="anakin", affiliation='sith lord', status='deceased')

